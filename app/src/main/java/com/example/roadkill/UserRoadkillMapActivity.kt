package com.example.roadkill

import android.Manifest
import android.content.ContentValues
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Color
import android.os.Bundle
import android.util.Log
import android.view.Menu
import android.view.MenuInflater
import android.view.MenuItem
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.example.roadkill.api.ManagerReportResponse
import com.example.roadkill.api.ReportService
import com.example.roadkill.databinding.ActivityUserRoadkillMapBinding
import com.google.android.gms.maps.model.BitmapDescriptorFactory
import com.naver.maps.geometry.LatLng
import com.naver.maps.geometry.LatLngBounds
import com.naver.maps.map.*
import com.naver.maps.map.overlay.CircleOverlay
import com.naver.maps.map.overlay.Marker
import com.naver.maps.map.overlay.OverlayImage
import com.naver.maps.map.util.FusedLocationSource
import kotlinx.coroutines.*
import org.json.JSONArray
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.io.IOException
import kotlin.coroutines.resume
import kotlin.coroutines.resumeWithException
import kotlin.coroutines.suspendCoroutine

class UserRoadkillMapActivity: AppCompatActivity(), OnMapReadyCallback {
    private lateinit var binding: ActivityUserRoadkillMapBinding
    private lateinit var naverMap: NaverMap
    private lateinit var locationSource: FusedLocationSource

    private val LOCATION_PERMISSION_REQUEST_CODE = 5000
    private val PERMISSIONS = arrayOf(
        Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION
    )

    private val jsonData = """[{"본부명":"수도권","경도":"127.3855901","지사명":"경기광주","5km":"330","위도":"37.2830594","발생건수":"5","방향":"통영","구간":"330~335","노선명":"제2중부선"},{"본부명":"수도권","경도":"127.3472754","지사명":"경기광주","5km":"335","위도":"37.3153254","발생건수":"3","방향":"하남","구간":"335~340","노선명":"제2중부선"},{"본부명":"수도권","경도":"127.3849201","지사명":"경기광주","5km":"330","위도":"37.2831926","발생건수":"3","방향":"통영","구간":"330~335","노선명":"중부선"},{"본부명":"수도권","경도":"127.3205395","지사명":"경기광주","5km":"340","위도":"37.3536425","발생건수":"3","방향":"통영","구간":"340~345","노선명":"중부선"},{"본부명":"수도권","경도":"127.4213702","지사명":"경기광주","5km":"325","위도":"37.2489572","발생건수":"3","방향":"하남","구간":"325~330","노선명":"중부선"},{"본부명":"수도권","경도":"127.3849201","지사명":"경기광주","5km":"330","위도":"37.2831926","발생건수":"3","방향":"하남","구간":"330~335","노선명":"중부선"},{"본부명":"수도권","경도":"127.2891253","지사명":"경기광주","5km":"350","위도":"37.4389270","발생건수":"5","방향":"하남","구간":"350~355","노선명":"중부선"},{"본부명":"수도권","경도":"127.0096347","지사명":"동서울","5km":"120","위도":"37.3903004","발생건수":"4","방향":"일산","구간":"120~125","노선명":"수도권제1순환선"},{"본부명":"수도권","경도":"127.1420652","지사명":"동서울","5km":"30","위도":"37.6138233","발생건수":"3","방향":"판교","구간":"30~35","노선명":"수도권제1순환선"},{"본부명":"수도권","경도":"126.9574134","지사명":"동서울","5km":"115","위도":"37.3791853","발생건수":"3","방향":"판교","구간":"115~120","노선명":"수도권제1순환선"},{"본부명":"수도권","경도":"126.8492325","지사명":"시흥","5km":"20","위도":"37.4398798","발생건수":"3","방향":"안양","구간":"20~25","노선명":"제2경인선"},{"본부명":"강원","경도":"129.0907032","지사명":"강릉","5km":"15","위도":"37.4862924","발생건수":"3","방향":"속초","구간":"15~20","노선명":"동해선"},{"본부명":"강원","경도":"128.8971321","지사명":"강릉","5km":"50","위도":"37.6908378","발생건수":"3","방향":"속초","구간":"50~55","노선명":"동해선"},{"본부명":"강원","경도":"128.1371004","지사명":"양양","5km":"95","위도":"37.7885332","발생건수":"3","방향":"양양","구간":"95~100","노선명":"서울양양선"},{"본부명":"강원","경도":"127.2353300","지사명":"이천","5km":"55","위도":"37.2477833","발생건수":"3","방향":"인천","구간":"55~60","노선명":"영동선"},{"본부명":"강원","경도":"127.5412771","지사명":"이천","5km":"280","위도":"37.3480828","발생건수":"3","방향":"양평","구간":"280~285","노선명":"중부내륙선"},{"본부명":"강원","경도":"127.9125914","지사명":"홍천","5km":"315","위도":"37.3409870","발생건수":"8","방향":"부산","구간":"315~320","노선명":"중앙선"},{"본부명":"강원","경도":"127.9732079","지사명":"홍천","5km":"345","위도":"37.5728840","발생건수":"4","방향":"부산","구간":"345~350","노선명":"중앙선"},{"본부명":"강원","경도":"127.9563302","지사명":"홍천","5km":"350","위도":"37.6134811","발생건수":"3","방향":"부산","구간":"350~355","노선명":"중앙선"},{"본부명":"강원","경도":"127.9193938","지사명":"홍천","5km":"355","위도":"37.6467580","발생건수":"3","방향":"부산","구간":"355~360","노선명":"중앙선"},{"본부명":"강원","경도":"127.8743817","지사명":"홍천","5km":"360","위도":"37.6701836","발생건수":"3","방향":"부산","구간":"360~365","노선명":"중앙선"},{"본부명":"강원","경도":"127.7909967","지사명":"홍천","5km":"375","위도":"37.7664292","발생건수":"3","방향":"부산","구간":"375~380","노선명":"중앙선"},{"본부명":"강원","경도":"127.7779955","지사명":"홍천","5km":"385","위도":"37.8387689","발생건수":"3","방향":"부산","구간":"385~390","노선명":"중앙선"},{"본부명":"강원","경도":"127.9125914","지사명":"홍천","5km":"315","위도":"37.3409870","발생건수":"6","방향":"춘천","구간":"315~320","노선명":"중앙선"},{"본부명":"강원","경도":"127.9169690","지사명":"홍천","5km":"325","위도":"37.4183258","발생건수":"6","방향":"춘천","구간":"325~330","노선명":"중앙선"},{"본부명":"강원","경도":"127.9732079","지사명":"홍천","5km":"345","위도":"37.5728840","발생건수":"3","방향":"춘천","구간":"345~350","노선명":"중앙선"},{"본부명":"강원","경도":"127.7909967","지사명":"홍천","5km":"375","위도":"37.7664292","발생건수":"4","방향":"춘천","구간":"375~380","노선명":"중앙선"},{"본부명":"강원","경도":"127.7716686","지사명":"홍천","5km":"380","위도":"37.8022068","발생건수":"3","방향":"춘천","구간":"380~385","노선명":"중앙선"},{"본부명":"강원","경도":"127.7779955","지사명":"홍천","5km":"385","위도":"37.8387689","발생건수":"4","방향":"춘천","구간":"385~390","노선명":"중앙선"},{"본부명":"충북","경도":"127.4306527","지사명":"보은","5km":"0","위도":"36.5647448","발생건수":"3","방향":"상주","구간":"0~5","노선명":"청주상주선"},{"본부명":"충북","경도":"127.4793220","지사명":"보은","5km":"5","위도":"36.5458603","발생건수":"3","방향":"상주","구간":"5~10","노선명":"청주상주선"},{"본부명":"충북","경도":"127.8883615","지사명":"보은","5km":"45","위도":"36.4474108","발생건수":"3","방향":"상주","구간":"45~50","노선명":"청주상주선"},{"본부명":"충북","경도":"127.7918926","지사명":"엄정","5km":"90","위도":"37.0363053","발생건수":"3","방향":"제천","구간":"90~95","노선명":"평택제천선"},{"본부명":"충북","경도":"127.2375483","지사명":"엄정","5km":"35","위도":"36.9817443","발생건수":"6","방향":"평택","구간":"35~40","노선명":"평택제천선"},{"본부명":"충북","경도":"128.2059482","지사명":"제천","5km":"270","위도":"37.0512475","발생건수":"4","방향":"부산","구간":"270~275","노선명":"중앙선"},{"본부명":"충북","경도":"128.2941624","지사명":"제천","5km":"260","위도":"37.0048542","발생건수":"3","방향":"춘천","구간":"260~265","노선명":"중앙선"},{"본부명":"충북","경도":"127.4240858","지사명":"진천","5km":"255","위도":"36.6665470","발생건수":"4","방향":"통영","구간":"255~260","노선명":"중부선"},{"본부명":"충북","경도":"127.4714058","지사명":"진천","5km":"290","위도":"36.9476101","발생건수":"5","방향":"통영","구간":"290~295","노선명":"중부선"},{"본부명":"충북","경도":"127.4801145","지사명":"진천","5km":"300","위도":"37.0354010","발생건수":"3","방향":"통영","구간":"300~305","노선명":"중부선"},{"본부명":"충북","경도":"127.4422137","지사명":"진천","5km":"320","위도":"37.2077647","발생건수":"5","방향":"통영","구간":"320~325","노선명":"중부선"},{"본부명":"충북","경도":"127.4202485","지사명":"진천","5km":"250","위도":"36.6222664","발생건수":"4","방향":"하남","구간":"250~255","노선명":"중부선"},{"본부명":"충북","경도":"127.4375391","지사명":"진천","5km":"260","위도":"36.7088023","발생건수":"5","방향":"하남","구간":"260~265","노선명":"중부선"},{"본부명":"충북","경도":"127.5066813","지사명":"진천","5km":"270","위도":"36.7782731","발생건수":"3","방향":"하남","구간":"270~275","노선명":"중부선"},{"본부명":"충북","경도":"127.4801145","지사명":"진천","5km":"300","위도":"37.0354010","발생건수":"6","방향":"하남","구간":"300~305","노선명":"중부선"},{"본부명":"충북","경도":"127.4625306","지사명":"진천","5km":"305","위도":"37.0774519","발생건수":"4","방향":"하남","구간":"305~310","노선명":"중부선"},{"본부명":"대전충남","경도":"126.9895716","지사명":"공주","5km":"50","위도":"36.5450241","발생건수":"3","방향":"당진","구간":"50~55","노선명":"당진대전선"},{"본부명":"대전충남","경도":"127.0585342","지사명":"공주","5km":"60","위도":"36.4847862","발생건수":"3","방향":"당진","구간":"60~65","노선명":"당진대전선"},{"본부명":"대전충남","경도":"127.2883162","지사명":"공주","5km":"85","위도":"36.4278717","발생건수":"3","방향":"당진","구간":"85~90","노선명":"당진대전선"},{"본부명":"대전충남","경도":"127.1654894","지사명":"공주","5km":"70","위도":"36.4975705","발생건수":"3","방향":"대전","구간":"70~75","노선명":"당진대전선"},{"본부명":"대전충남","경도":"127.2162697","지사명":"공주","5km":"75","위도":"36.4878046","발생건수":"4","방향":"대전","구간":"75~80","노선명":"당진대전선"},{"본부명":"대전충남","경도":"127.3203725","지사명":"공주","5km":"90","위도":"36.3935980","발생건수":"4","방향":"대전","구간":"90~95","노선명":"당진대전선"},{"본부명":"대전충남","경도":"126.6897475","지사명":"당진","5km":"10","위도":"36.7825784","발생건수":"5","방향":"대전","구간":"10~15","노선명":"당진대전선"},{"본부명":"대전충남","경도":"126.5639501","지사명":"당진","5km":"240","위도":"36.7323702","발생건수":"3","방향":"목포","구간":"240~245","노선명":"서해안선"},{"본부명":"대전충남","경도":"126.5662366","지사명":"당진","5km":"245","위도":"36.7762619","발생건수":"3","방향":"목포","구간":"245~250","노선명":"서해안선"},{"본부명":"대전충남","경도":"126.7591522","지사명":"당진","5km":"270","위도":"36.9190730","발생건수":"6","방향":"목포","구간":"270~275","노선명":"서해안선"},{"본부명":"대전충남","경도":"126.5547572","지사명":"당진","5km":"235","위도":"36.6883810","발생건수":"6","방향":"서울","구간":"235~240","노선명":"서해안선"},{"본부명":"대전충남","경도":"126.5662366","지사명":"당진","5km":"245","위도":"36.7762619","발생건수":"6","방향":"서울","구간":"245~250","노선명":"서해안선"},{"본부명":"대전충남","경도":"127.4275565","지사명":"대전","5km":"275","위도":"36.3795490","발생건수":"3","방향":"부산","구간":"275~280","노선명":"경부선"},{"본부명":"대전충남","경도":"127.4183421","지사명":"대전","5km":"285","위도":"36.4657563","발생건수":"5","방향":"부산","구간":"285~290","노선명":"경부선"},{"본부명":"대전충남","경도":"127.4663024","지사명":"대전","5km":"270","위도":"36.3496295","발생건수":"3","방향":"서울","구간":"270~275","노선명":"경부선"},{"본부명":"대전충남","경도":"127.3139200","지사명":"대전","5km":"35","위도":"36.2991000","발생건수":"3","방향":"회덕","구간":"35~40","노선명":"호남지선"},{"본부명":"대전충남","경도":"127.6029307","지사명":"영동","5km":"255","위도":"36.2948484","발생건수":"3","방향":"부산","구간":"255~260","노선명":"경부선"},{"본부명":"대전충남","경도":"127.5564176","지사명":"영동","5km":"260","위도":"36.3177499","발생건수":"3","방향":"부산","구간":"260~265","노선명":"경부선"},{"본부명":"대전충남","경도":"127.8809713","지사명":"영동","5km":"225","위도":"36.2197596","발생건수":"4","방향":"서울","구간":"225~230","노선명":"경부선"},{"본부명":"대전충남","경도":"127.3160565","지사명":"영동","5km":"0","위도":"36.2940785","발생건수":"3","방향":"산내","구간":"0~5","노선명":"대전남부순환선"},{"본부명":"대전충남","경도":"127.3700006","지사명":"영동","5km":"5","위도":"36.2856573","발생건수":"4","방향":"서대전","구간":"5~10","노선명":"대전남부순환선"},{"본부명":"대전충남","경도":"127.3836864","지사명":"천안","5km":"305","위도":"36.6253599","발생건수":"6","방향":"부산","구간":"305~310","노선명":"경부선"},{"본부명":"대전충남","경도":"127.3727573","지사명":"천안","5km":"310","위도":"36.6684890","발생건수":"4","방향":"부산","구간":"310~315","노선명":"경부선"},{"본부명":"대전충남","경도":"127.3472224","지사명":"천안","5km":"315","위도":"36.7044544","발생건수":"3","방향":"부산","구간":"315~320","노선명":"경부선"},{"본부명":"대전충남","경도":"127.3085103","지사명":"천안","5km":"320","위도":"36.7264483","발생건수":"4","방향":"부산","구간":"320~325","노선명":"경부선"},{"본부명":"대전충남","경도":"127.2563955","지사명":"천안","5km":"325","위도":"36.7345899","발생건수":"5","방향":"부산","구간":"325~330","노선명":"경부선"},{"본부명":"대전충남","경도":"127.1747598","지사명":"천안","5km":"335","위도":"36.7820643","발생건수":"3","방향":"부산","구간":"335~340","노선명":"경부선"},{"본부명":"대전충남","경도":"127.1681066","지사명":"천안","5km":"340","위도":"36.8254311","발생건수":"5","방향":"부산","구간":"340~345","노선명":"경부선"},{"본부명":"대전충남","경도":"127.2563955","지사명":"천안","5km":"325","위도":"36.7345899","발생건수":"3","방향":"서울","구간":"325~330","노선명":"경부선"},{"본부명":"전북","경도":"127.2749890","지사명":"논산","5km":"25","위도":"36.2269574","발생건수":"4","방향":"논산","구간":"25~30","노선명":"호남지선"},{"본부명":"전북","경도":"127.6379344","지사명":"무주","5km":"145","위도":"35.8031469","발생건수":"3","방향":"통영","구간":"145~150","노선명":"중부선"},{"본부명":"전북","경도":"126.7431945","지사명":"보령","5km":"155","위도":"36.0705525","발생건수":"4","방향":"목포","구간":"155~160","노선명":"서해안선"},{"본부명":"전북","경도":"126.6208259","지사명":"보령","5km":"170","위도":"36.1478478","발생건수":"4","방향":"목포","구간":"170~175","노선명":"서해안선"},{"본부명":"전북","경도":"126.5699130","지사명":"보령","5km":"180","위도":"36.2267079","발생건수":"4","방향":"목포","구간":"180~185","노선명":"서해안선"},{"본부명":"전북","경도":"126.5552914","지사명":"보령","5km":"200","위도":"36.3871607","발생건수":"4","방향":"목포","구간":"200~205","노선명":"서해안선"},{"본부명":"전북","경도":"126.5767559","지사명":"보령","5km":"205","위도":"36.4268359","발생건수":"3","방향":"목포","구간":"205~210","노선명":"서해안선"},{"본부명":"전북","경도":"126.5794765","지사명":"보령","5km":"220","위도":"36.5586954","발생건수":"3","방향":"목포","구간":"220~225","노선명":"서해안선"},{"본부명":"전북","경도":"126.5794765","지사명":"보령","5km":"220","위도":"36.5586954","발생건수":"3","방향":"서울","구간":"220~225","노선명":"서해안선"},{"본부명":"전북","경도":"126.7772633","지사명":"부여","5km":"20","위도":"36.2167446","발생건수":"5","방향":"공주","구간":"20~25","노선명":"서천공주선"},{"본부명":"전북","경도":"126.7980863","지사명":"부여","5km":"25","위도":"36.2578517","발생건수":"3","방향":"공주","구간":"25~30","노선명":"서천공주선"},{"본부명":"전북","경도":"126.9134826","지사명":"부여","5km":"40","위도":"36.3532524","발생건수":"3","방향":"공주","구간":"40~45","노선명":"서천공주선"},{"본부명":"광주전남","경도":"127.1369875","지사명":"남원","5km":"30","위도":"35.3629986","발생건수":"3","방향":"광주","구간":"30~35","노선명":"광주대구선"},{"본부명":"광주전남","경도":"127.2893840","지사명":"남원","5km":"45","위도":"35.3936382","발생건수":"3","방향":"광주","구간":"45~50","노선명":"광주대구선"},{"본부명":"광주전남","경도":"127.6965106","지사명":"남원","5km":"90","위도":"35.5433140","발생건수":"3","방향":"대구","구간":"90~95","노선명":"광주대구선"},{"본부명":"광주전남","경도":"127.5283704","지사명":"순천","5km":"5","위도":"34.9903282","발생건수":"3","방향":"순천","구간":"5~10","노선명":"남해선"},{"본부명":"광주전남","경도":"127.2445460","지사명":"순천","5km":"35","위도":"35.1753033","발생건수":"3","방향":"순천","구간":"35~40","노선명":"호남선"},{"본부명":"광주전남","경도":"126.4391644","지사명":"함평","5km":"5","위도":"35.0158235","발생건수":"4","방향":"광주","구간":"5~10","노선명":"무안광주선"},{"본부명":"광주전남","경도":"126.4896234","지사명":"함평","5km":"10","위도":"35.0303250","발생건수":"4","방향":"광주","구간":"10~15","노선명":"무안광주선"},{"본부명":"광주전남","경도":"126.6874541","지사명":"함평","5km":"30","위도":"35.0984857","발생건수":"4","방향":"광주","구간":"30~35","노선명":"무안광주선"},{"본부명":"광주전남","경도":"126.6874541","지사명":"함평","5km":"30","위도":"35.0984857","발생건수":"7","방향":"무안","구간":"30~35","노선명":"무안광주선"},{"본부명":"광주전남","경도":"126.7343378","지사명":"함평","5km":"35","위도":"35.1199527","발생건수":"3","방향":"무안","구간":"35~40","노선명":"무안광주선"},{"본부명":"광주전남","경도":"126.4719396","지사명":"함평","5km":"5","위도":"34.8496291","발생건수":"3","방향":"목포","구간":"5~10","노선명":"서해안선"},{"본부명":"광주전남","경도":"126.4796394","지사명":"함평","5km":"30","위도":"35.0649544","발생건수":"4","방향":"목포","구간":"30~35","노선명":"서해안선"},{"본부명":"광주전남","경도":"126.4812870","지사명":"함평","5km":"35","위도":"35.1099659","발생건수":"3","방향":"목포","구간":"35~40","노선명":"서해안선"},{"본부명":"광주전남","경도":"126.4957519","지사명":"함평","5km":"20","위도":"34.9761177","발생건수":"4","방향":"서울","구간":"20~25","노선명":"서해안선"},{"본부명":"광주전남","경도":"126.4892992","지사명":"함평","5km":"25","위도":"35.0207604","발생건수":"4","방향":"서울","구간":"25~30","노선명":"서해안선"},{"본부명":"광주전남","경도":"126.4812870","지사명":"함평","5km":"35","위도":"35.1099659","발생건수":"5","방향":"서울","구간":"35~40","노선명":"서해안선"},{"본부명":"광주전남","경도":"126.5436837","지사명":"함평","5km":"55","위도":"35.2732961","발생건수":"3","방향":"서울","구간":"55~60","노선명":"서해안선"},{"본부명":"대구경북","경도":"128.6178162","지사명":"영주","5km":"180","위도":"36.4786835","발생건수":"5","방향":"부산","구간":"180~185","노선명":"중앙선"},{"본부명":"대구경북","경도":"128.5437800","지사명":"영주","5km":"225","위도":"36.8098916","발생건수":"3","방향":"춘천","구간":"225~230","노선명":"중앙선"},{"본부명":"대구경북","경도":"128.6084357","지사명":"청송","5km":"115","위도":"36.4335624","발생건수":"3","방향":"영덕","구간":"115~120","노선명":"당진영덕선"},{"본부명":"부산경남","경도":"128.3813689","지사명":"고성","5km":"15","위도":"34.9752193","발생건수":"3","방향":"통영","구간":"15~20","노선명":"중부선"},{"본부명":"부산경남","경도":"128.6091613","지사명":"창원","5km":"15","위도":"35.2610778","발생건수":"4","방향":"산인","구간":"15~20","노선명":"남해제1지선"}]"""
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityUserRoadkillMapBinding.inflate(layoutInflater)
        setContentView(binding.root)

        if (!hasPermission()) {
            ActivityCompat.requestPermissions(this, PERMISSIONS, LOCATION_PERMISSION_REQUEST_CODE)
        } else {
            initMapView()
        }


  //      val result = runBlocking {
  //          getReportLatLngFun()
  //      }
  //      Log.d("리포트리스트1", result.toString())
//        // CoroutineScope를 생성합니다.
//        val scope = CoroutineScope(Dispatchers.Default)
//
//        // 비동기 작업을 시작합니다.
//        val job = scope.async {
//            // 여기에 비동기 작업을 수행하는 코드를 작성합니다.
//            getReportLatLngFun()
//        }
//
//        // 비동기 작업이 완료될 때까지 대기합니다.
//        runBlocking {
//            val result = job.await()
//
//            // 이후에 실행할 코드를 여기에 작성합니다.
//            Log.d("리포트리스트2", result.toString())
//
//            for (latLng in result) {
//                val marker = Marker()
//                marker.position = latLng
//                marker.map = naverMap
//            }
//        }
//
//        // CoroutineScope를 닫습니다.
//        scope.cancel()

    }

    private fun initMapView() {
        val fm = supportFragmentManager
        val mapFragment = fm.findFragmentById(R.id.map_fragment) as MapFragment?
            ?: MapFragment.newInstance().also {
                fm.beginTransaction().add(R.id.map_fragment, it).commit()
            }

        // fragment의 getMapAsync() 메서드로 OnMapReadyCallback 콜백을 등록하면 비동기로 NaverMap 객체를 얻을 수 있다.
        mapFragment.getMapAsync(this)
        locationSource = FusedLocationSource(this, LOCATION_PERMISSION_REQUEST_CODE)
    }

    // hasPermission()에서는 위치 권한이 있을 경우 true를, 없을 경우 false를 반환한다.
    private fun hasPermission(): Boolean {
        for (permission in PERMISSIONS) {
            if (ContextCompat.checkSelfPermission(this, permission)
                != PackageManager.PERMISSION_GRANTED
            ) {
                return false
            }
        }
        return true
    }

    override fun onMapReady(naverMap: NaverMap) {

        this.naverMap = naverMap
        // 현재 위치
        naverMap.locationSource = locationSource
        // 현재 위치 버튼 기능
        naverMap.uiSettings.isLocationButtonEnabled = true
        // 위치를 추적하면서 카메라도 따라 움직인다.
        naverMap.locationTrackingMode = LocationTrackingMode.Follow

        naverMap.setOnMapLongClickListener { point, coord ->  // 지도 롱 클릭 시 마커 생성
            Toast.makeText(
                this, "${coord.latitude}, ${coord.longitude}",
                Toast.LENGTH_SHORT
            ).show()
        }

        getReportLatLngFun(naverMap)
    }


    private fun getReportLatLngFun(naverMap: NaverMap){
        ReportService.retrofitGetManagerReport().enqueue(object:
            Callback<List<ManagerReportResponse>> {
            override fun onResponse(
                call: Call<List<ManagerReportResponse>>,
                response: Response<List<ManagerReportResponse>>
            ) {
                if (response.isSuccessful) {
                    val managerReports = response.body()
                    Log.d("매니저리포츠", managerReports.toString())
                    if (managerReports != null) {
                        // JSON 배열을 반복하여 각각의 MyReportResponse 객체를 처리할 수 있습니다.
                        for (report in managerReports) {
                            Log.d("리포트", report.toString())
                            val lat = report.lat
                            val lng = report.lng
                            val marker = Marker()
                            marker.width = 40 // 마커의 너비 조절
                            marker.height = 40
                            marker.position = LatLng(lat, lng)
                            marker.map = naverMap
                        }
                    } else {
                        try {
                            val body = response.errorBody()!!.string()
                            Log.e(ContentValues.TAG, "body : $body")
                        } catch (e: IOException) {
                            e.printStackTrace()
                        }
                    }
                }
            }
            override fun onFailure(call: Call<List<ManagerReportResponse>>, t: Throwable) {
                Log.e("TAG", "실패원인: {$t}")
            }
        })
        getRoadkillDataLatLngFun(naverMap)
    }

    private fun getRoadkillDataLatLngFun(naverMap: NaverMap){
        val jsonArray = JSONArray(jsonData)
        for (i in 0 until jsonArray.length()) {
            val jsonObject = jsonArray.getJSONObject(i)
            val latitude = jsonObject.optString("위도", "0").toDouble()
            val longitude = jsonObject.optString("경도", "0").toDouble()
            val markerIcon : OverlayImage

            if(i % 9 == 1)
                 markerIcon = OverlayImage.fromResource(R.drawable.boar)
            else if(i % 14 == 5)
                 markerIcon = OverlayImage.fromResource(R.drawable.raccoon)
            else if(i % 14 == 7)
                markerIcon = OverlayImage.fromResource(R.drawable.cat)
            else
                markerIcon = OverlayImage.fromResource(R.drawable.deer)
            // 위도와 경도를 LatLng 객체로 변환하여 마커를 추가합니다.
            val marker = Marker()
            marker.position = LatLng(latitude, longitude)
            marker.icon = markerIcon
            marker.width = 40 // 마커의 너비 조절
            marker.height = 40
            marker.map = naverMap
        }

        val center = LatLng(36.665212, 127.406670) // 원의 중심 위치
        val radius = 20000.0 // 원의 반지름 (미터 단위)

        // 원 생성 및 속성 설정
        val circle = CircleOverlay()
        circle.center = center // 원의 중심 위치 설정
        circle.radius = radius // 원의 반지름 설정 (미터 단위)
        circle.color = resources.getColor(R.color.green) // 원의 색상 설정
        circle.outlineWidth = 2 // 원의 외곽선 두께 설정 (픽셀 단위)
        circle.color = Color.argb(128, 224, 117, 117)
        circle.outlineColor = Color.argb(128, 224, 117, 117) // 원의 외곽선 색상 설정
        circle.setOnClickListener { _ ->
            // 클릭 시 토스트 메시지 표시
            Toast.makeText(this, "고라니 사고 다발 지역", Toast.LENGTH_SHORT).show()
            return@setOnClickListener true // 반드시 true를 반환합니다.
        }

        // 원을 지도에 추가
        circle.map = naverMap

        val center2 = LatLng(35.054897, 126.487027) // 원의 중심 위치
        val radius2 = 10000.0 // 원의 반지름 (미터 단위)

        // 원 생성 및 속성 설정
        val circle2 = CircleOverlay()
        circle2.center = center2 // 원의 중심 위치 설정
        circle2.radius = radius2 // 원의 반지름 설정 (미터 단위)
        circle2.color = resources.getColor(R.color.green) // 원의 색상 설정
        circle2.outlineWidth = 2 // 원의 외곽선 두께 설정 (픽셀 단위)
        circle2.color = Color.argb(128, 224, 117, 117)
        circle2.outlineColor = Color.argb(128, 224, 117, 117) // 원의 외곽선 색상 설정
        circle2.setOnClickListener { _ ->
            // 클릭 시 토스트 메시지 표시
            Toast.makeText(this, "고라니, 멧돼지 사고 다발 지역", Toast.LENGTH_SHORT).show()
            return@setOnClickListener true // 반드시 true를 반환합니다.
        }

        // 원을 지도에 추가
        circle2.map = naverMap

        val center3 = LatLng(37.314101, 127.391038) // 원의 중심 위치
        val radius3 = 15000.0 // 원의 반지름 (미터 단위)

        // 원 생성 및 속성 설정
        val circle3 = CircleOverlay()
        circle3.center = center3 // 원의 중심 위치 설정
        circle3.radius = radius3 // 원의 반지름 설정 (미터 단위)
        circle3.color = resources.getColor(R.color.green) // 원의 색상 설정
        circle3.outlineWidth = 2 // 원의 외곽선 두께 설정 (픽셀 단위)
        circle3.color = Color.argb(128, 224, 117, 117)
        circle3.outlineColor = Color.argb(128, 224, 117, 117) // 원의 외곽선 색상 설정
        circle3.setOnClickListener { _ ->
            // 클릭 시 토스트 메시지 표시
            Toast.makeText(this, "고라니 사고 다발 지역", Toast.LENGTH_SHORT).show()
            return@setOnClickListener true // 반드시 true를 반환합니다.
        }

        // 원을 지도에 추가
        circle3.map = naverMap

        val center4 = LatLng(37.715067, 127.849200) // 원의 중심 위치
        val radius4 = 20000.0 // 원의 반지름 (미터 단위)

        // 원 생성 및 속성 설정
        val circle4 = CircleOverlay()
        circle4.center = center4 // 원의 중심 위치 설정
        circle4.radius = radius4 // 원의 반지름 설정 (미터 단위)
        circle4.color = resources.getColor(R.color.green) // 원의 색상 설정
        circle4.outlineWidth = 2 // 원의 외곽선 두께 설정 (픽셀 단위)
        circle4.color = Color.argb(128, 224, 117, 117)
        circle4.outlineColor = Color.argb(128, 224, 117, 117) // 원의 외곽선 색상 설정
        circle4.setOnClickListener { _ ->
            // 클릭 시 토스트 메시지 표시
            Toast.makeText(this, "고라니 사고 다발 지역", Toast.LENGTH_SHORT).show()
            return@setOnClickListener true // 반드시 true를 반환합니다.
        }

        // 원을 지도에 추가
        circle4.map = naverMap

        val center5 = LatLng(36.348589, 127.400549) // 원의 중심 위치
        val radius5 = 20000.0 // 원의 반지름 (미터 단위)

        // 원 생성 및 속성 설정
        val circle5 = CircleOverlay()
        circle5.center = center5 // 원의 중심 위치 설정
        circle5.radius = radius5 // 원의 반지름 설정 (미터 단위)
        circle5.color = resources.getColor(R.color.green) // 원의 색상 설정
        circle5.outlineWidth = 2 // 원의 외곽선 두께 설정 (픽셀 단위)
        circle5.color = Color.argb(128, 224, 117, 117)
        circle5.outlineColor = Color.argb(128, 224, 117, 117) // 원의 외곽선 색상 설정
        circle5.setOnClickListener { _ ->
            // 클릭 시 토스트 메시지 표시
            Toast.makeText(this, "고라니 사고 다발 지역", Toast.LENGTH_SHORT).show()
            return@setOnClickListener true // 반드시 true를 반환합니다.
        }

        // 원을 지도에 추가
        circle5.map = naverMap

        // 마커가 모두 표시되는 위치로 카메라 이동
        val bounds = LatLngBounds.Builder()
        for (i in 0 until jsonArray.length()) {
            val jsonObject = jsonArray.getJSONObject(i)
            val latitude = jsonObject.getDouble("위도")
            val longitude = jsonObject.getDouble("경도")
            bounds.include(LatLng(latitude, longitude))
        }
        val cameraUpdate = CameraUpdate.fitBounds(bounds.build())
        naverMap.moveCamera(cameraUpdate)
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        val inflater: MenuInflater = menuInflater
        inflater.inflate(R.menu.user_menu, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem) : Boolean {
        return when (item.itemId) {
            R.id.item1 -> {
                val intent = Intent(applicationContext, MainActivity::class.java)
                startActivity(intent)
                return true
            }
            R.id.item2 -> {
                return true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }
}

private fun CircleOverlay.onClickListener(block: suspend CoroutineScope.() -> Unit) {

}
